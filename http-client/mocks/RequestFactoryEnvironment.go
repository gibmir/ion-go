// Code generated by mockery v2.14.0. DO NOT EDIT.

package OUTPKG

import (
	http "net/http"

	pool "github.com/gibmir/ion-go/pool"
	mock "github.com/stretchr/testify/mock"

	processor "github.com/gibmir/ion-go/processor"
)

// RequestFactoryEnvironment is an autogenerated mock type for the RequestFactoryEnvironment type
type RequestFactoryEnvironment struct {
	mock.Mock
}

// BufferPool provides a mock function with given fields:
func (_m *RequestFactoryEnvironment) BufferPool() *pool.BufferPool {
	ret := _m.Called()

	var r0 *pool.BufferPool
	if rf, ok := ret.Get(0).(func() *pool.BufferPool); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pool.BufferPool)
		}
	}

	return r0
}

// DefaultUrl provides a mock function with given fields:
func (_m *RequestFactoryEnvironment) DefaultUrl() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// HttpClient provides a mock function with given fields:
func (_m *RequestFactoryEnvironment) HttpClient() *http.Client {
	ret := _m.Called()

	var r0 *http.Client
	if rf, ok := ret.Get(0).(func() *http.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Client)
		}
	}

	return r0
}

// Processor provides a mock function with given fields:
func (_m *RequestFactoryEnvironment) Processor() processor.Processor {
	ret := _m.Called()

	var r0 processor.Processor
	if rf, ok := ret.Get(0).(func() processor.Processor); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(processor.Processor)
		}
	}

	return r0
}

type mockConstructorTestingTNewRequestFactoryEnvironment interface {
	mock.TestingT
	Cleanup(func())
}

// NewRequestFactoryEnvironment creates a new instance of RequestFactoryEnvironment. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRequestFactoryEnvironment(t mockConstructorTestingTNewRequestFactoryEnvironment) *RequestFactoryEnvironment {
	mock := &RequestFactoryEnvironment{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
